label {
    .mat-input-container {
        width: inherit;
        .mat-input-wrapper {
            margin: 0;
            padding-bottom: 0;
            .mat-input-subscript-wrapper {
                margin-top: initial;
                padding-top: 6px;
            }
        }        
    }
}
.mat-input-container {
    .mat-input-wrapper {
        margin-top: 0;
        .mat-input-element {
            box-sizing: border-box;
            height: $input-height-mob;
            font-size: $input-font-size-mob;
            padding-bottom: 8px;
            border: 0;
            border-bottom-width: 1px;
            border-bottom-style: solid;
            border-color: $default-border-color;
            vertical-align: baseline;
            &[readonly], &[disabled]:not([disabled="false"]) {
                border-style: dashed;
                border-color: $readonly-border-color;
            }
        }
        .mat-input-prefix, .mat-input-suffix {
            box-sizing: border-box;
            height: $input-height-mob;
            font-size: $input-font-size-mob;
            padding-bottom: 8px;
            border: 0;
            border-bottom-width: 1px;
            border-bottom-style: solid;
            border-color: $default-border-color;
            vertical-align: middle;
            line-height: 1;
        }
        .mat-input-placeholder-wrapper {
            height: $input-height-mob;
            .mat-input-placeholder {
                height: inherit;
                font-size: $input-font-size-mob;
                color: $placeholder-color;
            }
        }
        .error {
            position: absolute;
            width: 100%;
            overflow: hidden;
            color: map-get($warn,500);
            font-size: $error-font-size;
            margin-top: 6px;
        }
    }
    // focus border color for default
    &.mat-focused:not([dividercolor]) {
        .mat-input-wrapper {
            .mat-input-prefix, .mat-input-suffix {
                border-color: $focus-border-color;
            }        
            .mat-input-element {
                &:focus {
                    border-color: $focus-border-color;
                }
            }
        }
    }
    // focus border color for primary
    // and also if dividercolor value is not legitamate
    &.mat-focused[dividercolor] {
        .mat-input-wrapper {
            .mat-input-prefix, .mat-input-suffix {
                border-color: map-get($primary,500);
            }         
            .mat-input-element {
                &:focus {
                    border-color: map-get($primary,500);
                }
            }
        }
    }
    // focus border color for accent
    &.mat-focused[dividercolor="accent"] {
        .mat-input-wrapper {
            .mat-input-prefix, .mat-input-suffix {
                border-color: map-get($accent,500);
            }        
            .mat-input-element {
                &:focus {
                    border-color: map-get($accent,500);
                }
            }
        }
    }
    // focus border color for warn
    &.mat-focused[dividercolor="warn"] {
        .mat-input-wrapper {
            .mat-input-prefix, .mat-input-suffix {
                border-color: map-get($warn,500);
            }        
            .mat-input-element {
                &:focus {
                    border-color: map-get($warn,500);
                }
            }
        }
    }
    // normal and focus border color for input with error
    &.ng-invalid {
        //first hide the hint messages
        .mat-input-hint-wrapper {
            display: none;
        }
        .mat-input-wrapper {
            .mat-input-prefix, .mat-input-suffix {
                border-color: map-get($warn,500);
            }        
            .mat-input-element, .mat-input-element:focus {
                border-color: map-get($warn,500);
            }
        }
    } 
    .mat-input-underline {
        display: none;
    }
}

.mat-input-container {
    &.mat-focused .mat-input-placeholder.mat-float, .mat-input-placeholder.mat-float:not(.mat-empty) {
        display: block;
        transform: translate3d(0, -1.4em, 0) scale(0.75);
        width: 133.33333%;
        transition: transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1);
    }
}

@media only screen and (min-width: breakpoint-min(sm)) {
    .mat-input-container {
        .mat-input-wrapper {        
            .mat-input-prefix, .mat-input-element,
            .mat-input-suffix {
                height: $input-height-tab;
                padding-bottom: initial;
                font-size: $input-font-size-tab;
                border-width: 1px;
                border-style: solid;
            }
            .mat-input-prefix {
                padding-left: $input-pad-lr-tab;
                padding-right: 0;
            }
            .mat-input-suffix {
                padding-left: 0;
                padding-right: $input-pad-lr-tab;
            }
            .mat-input-element {
                padding-left: $input-pad-lr-tab;
                padding-right: $input-pad-lr-tab;
            }
            .mat-input-prefix {
                border-right: 0;
            }
            .mat-input-suffix {
                border-left: 0;
            }
            .mat-input-prefix + .mat-input-infix > .mat-input-element {
                border-left: 0;
            }
            .mat-input-table .mat-input-infix:not(:last-child) > .mat-input-element {
                border-right: 0;
            }
            .mat-input-placeholder-wrapper {
                height: $input-height-tab;
                .mat-input-placeholder {
                    height: inherit;
                    line-height: $input-height-tab;
                    margin-top: 2px;
                    padding-left: $input-pad-lr-tab + 0.1rem;
                    padding-right: $input-pad-lr-tab + 0.1rem;
                    font-size: $input-font-size-tab;
                }
            }
        }
        &.mat-focused .mat-input-placeholder.mat-float, .mat-input-placeholder.mat-float:not(.mat-empty) {
            transform: translate3d(-0.4rem, -1.8em, 0) scale(0.75);
        }
    }
}

@media only screen and (min-width: breakpoint-min(md)) {
    .mat-input-container {
        .mat-input-wrapper {        
            .mat-input-prefix, .mat-input-element,
            .mat-input-suffix {
                height: $input-height-desk;
                font-size: $input-font-size-desk;
            }
            .mat-input-prefix {
                padding-left: $input-pad-lr-desk;
                padding-right: 0;
            }
            .mat-input-suffix {
                padding-left: 0;
                padding-right: $input-pad-lr-desk;
            }
            .mat-input-element {
                padding-left: $input-pad-lr-desk;
                padding-right: $input-pad-lr-desk;
            }
            .mat-input-placeholder-wrapper {
                height: $input-height-desk;
                .mat-input-placeholder {
                    line-height: $input-height-desk;
                    margin-top: initial;
                    padding-left: $input-pad-lr-desk + 0.1rem;
                    padding-right: $input-pad-lr-desk + 0.1rem;
                    font-size: $input-font-size-desk;
                }
            }
        }
        &.mat-focused .mat-input-placeholder.mat-float, .mat-input-placeholder.mat-float:not(.mat-empty) {
            transform: translate3d(-0.6rem,-2.2em,0) scale(.75);
        }
    }
}